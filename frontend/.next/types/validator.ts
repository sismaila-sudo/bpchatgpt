// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/analytics/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/analytics">> = Specific
  const handler = {} as typeof import("../../src/app/analytics/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/auth-code-error/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/auth-code-error">> = Specific
  const handler = {} as typeof import("../../src/app/auth/auth-code-error/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/forgot-password/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/forgot-password">> = Specific
  const handler = {} as typeof import("../../src/app/auth/forgot-password/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/login">> = Specific
  const handler = {} as typeof import("../../src/app/auth/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/register/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/register">> = Specific
  const handler = {} as typeof import("../../src/app/auth/register/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/collaboration/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/collaboration">> = Specific
  const handler = {} as typeof import("../../src/app/collaboration/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/import/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/import">> = Specific
  const handler = {} as typeof import("../../src/app/import/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/profile">> = Specific
  const handler = {} as typeof import("../../src/app/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/projects/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/projects/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/projects/new/create/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/new/create">> = Specific
  const handler = {} as typeof import("../../src/app/projects/new/create/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/projects/new/existing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/new/existing">> = Specific
  const handler = {} as typeof import("../../src/app/projects/new/existing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/projects/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/new">> = Specific
  const handler = {} as typeof import("../../src/app/projects/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/projects/new/select/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/new/select">> = Specific
  const handler = {} as typeof import("../../src/app/projects/new/select/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/projects/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects">> = Specific
  const handler = {} as typeof import("../../src/app/projects/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/test-auth/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-auth">> = Specific
  const handler = {} as typeof import("../../src/app/test-auth/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/openai-analysis/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/openai-analysis">> = Specific
  const handler = {} as typeof import("../../src/app/api/openai-analysis/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/simple/calculate/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/simple/calculate">> = Specific
  const handler = {} as typeof import("../../src/app/api/simple/calculate/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/upload-document/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/upload-document">> = Specific
  const handler = {} as typeof import("../../src/app/api/upload-document/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/callback/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/auth/callback">> = Specific
  const handler = {} as typeof import("../../src/app/auth/callback/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

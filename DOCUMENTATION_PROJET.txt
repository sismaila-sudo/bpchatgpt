================================================================================
                     DOCUMENTATION TECHNIQUE DU PROJET
                        GÉNÉRATEUR DE BUSINESS PLAN
================================================================================

🎯 DESCRIPTION DU PROJET
========================
Application web complète de génération de business plans avec templates
sectoriels, calculs financiers automatisés, et génération IA de contenu.

📊 ARCHITECTURE GÉNÉRALE
========================
- Frontend: Next.js 15 + React 19 + TypeScript + Tailwind CSS
- Backend: Fastify + TypeScript
- Base de données: Supabase (PostgreSQL) avec Row Level Security
- IA: Google Gemini API pour génération de contenu
- Authentification: Supabase Auth
- Stockage fichiers: Supabase Storage
- UI Components: Radix UI + shadcn/ui

🗂️ STRUCTURE DU PROJET
======================

BPCHATGPT/
│
├── frontend/                          # Application Next.js
│   ├── src/
│   │   ├── app/                       # App Router Next.js 15
│   │   │   ├── auth/                  # Pages d'authentification
│   │   │   │   ├── login/page.tsx
│   │   │   │   ├── register/page.tsx
│   │   │   │   ├── forgot-password/page.tsx
│   │   │   │   └── auth-code-error/page.tsx
│   │   │   ├── projects/              # Gestion des projets
│   │   │   │   ├── page.tsx           # Liste des projets
│   │   │   │   ├── new/page.tsx       # Création projet avec templates
│   │   │   │   └── [id]/page.tsx      # Détail projet + éditeur
│   │   │   ├── profile/page.tsx       # Profil utilisateur
│   │   │   ├── import/page.tsx        # Import données Excel
│   │   │   ├── layout.tsx             # Layout principal
│   │   │   └── page.tsx               # Page d'accueil
│   │   │
│   │   ├── components/                # Composants React
│   │   │   ├── ui/                    # Composants UI de base
│   │   │   │   ├── button.tsx         # Bouton avec variants
│   │   │   │   ├── card.tsx           # Cartes
│   │   │   │   ├── input.tsx          # Champs de saisie
│   │   │   │   ├── dialog.tsx         # Modales (Radix UI)
│   │   │   │   ├── alert-dialog.tsx   # Confirmations
│   │   │   │   ├── radio-group.tsx    # Boutons radio
│   │   │   │   ├── badge.tsx          # Badges
│   │   │   │   ├── label.tsx          # Labels
│   │   │   │   └── textarea.tsx       # Zones de texte
│   │   │   │
│   │   │   ├── project/               # Composants spécifiques projets
│   │   │   │   ├── tabs/              # Onglets du projet
│   │   │   │   │   ├── BusinessPlanTab.tsx    # Vue document final
│   │   │   │   │   ├── SectionsTab.tsx        # Gestion sections
│   │   │   │   │   ├── FinancialTab.tsx       # Calculs financiers
│   │   │   │   │   └── ExportTab.tsx          # Export PDF/Word
│   │   │   │   │
│   │   │   │   ├── SectionImageManager.tsx    # Gestion images sections
│   │   │   │   ├── SectionEditor.tsx          # Éditeur de sections
│   │   │   │   └── FinancialCalculations.tsx  # Calculateur financier
│   │   │   │
│   │   │   └── layout/                # Composants de mise en page
│   │   │       ├── Header.tsx         # En-tête application
│   │   │       ├── Sidebar.tsx        # Barre latérale
│   │   │       └── Footer.tsx         # Pied de page
│   │   │
│   │   ├── hooks/                     # Hooks React personnalisés
│   │   │   ├── useAuth.ts             # Gestion authentification
│   │   │   ├── useProjects.ts         # Gestion projets
│   │   │   └── useDashboardStats.ts   # Statistiques dashboard
│   │   │
│   │   ├── lib/                       # Utilitaires et configuration
│   │   │   ├── supabase/              # Configuration Supabase
│   │   │   │   ├── client.ts          # Client côté navigateur
│   │   │   │   └── server.ts          # Client côté serveur
│   │   │   │
│   │   │   ├── utils.ts               # Utilitaires généraux (cn, etc.)
│   │   │   └── constants.ts           # Constantes application
│   │   │
│   │   ├── services/                  # Services métier
│   │   │   ├── documentTemplateService.ts     # NOUVEAU: Gestion templates
│   │   │   ├── financialService.ts            # Calculs financiers
│   │   │   ├── aiService.ts                   # Intégration Gemini AI
│   │   │   ├── pdfExport.ts                   # Export PDF
│   │   │   └── excelImport.ts                 # Import Excel
│   │   │
│   │   └── types/                     # Types TypeScript
│   │       ├── database.ts            # Types base de données
│   │       ├── financial.ts           # Types financiers
│   │       └── project.ts             # Types projets
│   │
│   ├── .env.local                     # Variables d'environnement
│   ├── package.json                   # Dépendances frontend
│   ├── next.config.js                 # Configuration Next.js
│   ├── tailwind.config.js             # Configuration Tailwind
│   └── tsconfig.json                  # Configuration TypeScript
│
├── backend/                           # API Fastify
│   ├── src/
│   │   ├── routes/                    # Routes API
│   │   │   ├── projects.ts            # CRUD projets
│   │   │   ├── financial.ts           # Calculs financiers
│   │   │   ├── ai.ts                  # Génération IA
│   │   │   └── templates.ts           # NOUVEAU: API templates
│   │   │
│   │   ├── services/                  # Services backend
│   │   │   ├── projectService.ts      # Logique métier projets
│   │   │   ├── financialService.ts    # Moteur de calcul
│   │   │   ├── aiService.ts           # Service IA
│   │   │   └── templateService.ts     # NOUVEAU: Service templates
│   │   │
│   │   ├── utils/                     # Utilitaires backend
│   │   │   ├── database.ts            # Connexion Supabase
│   │   │   └── logger.ts              # Système de logs
│   │   │
│   │   └── index.ts                   # Point d'entrée serveur
│   │
│   ├── package.json                   # Dépendances backend
│   └── tsconfig.json                  # Configuration TypeScript
│
├── database/                          # Scripts base de données
│   ├── setup-templates.sql            # NOUVEAU: Schéma templates
│   ├── initial-schema.sql             # Schéma principal
│   └── seed-data.sql                  # Données de test
│
└── docs/                             # Documentation
    ├── API.md                        # Documentation API
    ├── TEMPLATES.md                  # NOUVEAU: Guide templates
    └── DEPLOYMENT.md                 # Guide déploiement

🔧 TECHNOLOGIES UTILISÉES
=========================

Frontend:
---------
- Next.js 15.5.3 (App Router)
- React 19.1.0 + React DOM 19.1.0
- TypeScript 5.x
- Tailwind CSS 4.x + PostCSS
- Radix UI (composants accessibles)
- shadcn/ui (système de design)
- Zustand (état global)
- React Query (@tanstack/react-query)
- React Hook Form + Zod (formulaires)
- Lucide React (icônes)
- html2canvas + jsPDF (export PDF)
- xlsx (import/export Excel)
- date-fns (manipulation dates)
- sonner (notifications toast)

Backend:
--------
- Fastify (serveur HTTP rapide)
- TypeScript
- tsx (exécution TypeScript)

Base de données:
---------------
- Supabase (PostgreSQL hébergé)
- Row Level Security (RLS)
- Supabase Storage (fichiers)
- Supabase Auth (authentification)

IA et Services:
--------------
- Google Gemini AI (@google/generative-ai)
- Supabase Client (@supabase/supabase-js)
- Supabase SSR (@supabase/ssr)

🗄️ SCHÉMA BASE DE DONNÉES
=========================

Tables principales:
------------------
- organizations          # Organisations/entreprises
- projects               # Projets de business plan
- project_collaborators  # Collaborateurs projets
- project_sections       # Sections des business plans
- products               # Produits/services
- sales_projections      # Projections de ventes
- opex_items            # Dépenses opérationnelles
- capex_items           # Investissements

Tables templates (NOUVELLES):
----------------------------
- document_templates     # Templates de documents
- template_sections      # Sections des templates
- section_images        # Images des sections
- company_history       # Historique entreprises

Tables financières:
------------------
- financial_projections # Projections financières
- cash_flow_statements  # Tableaux de trésorerie
- profit_loss_statements # Comptes de résultat

🚀 SERVEURS ET PORTS
===================

Configuration actuelle:
- Frontend: http://localhost:3007
- Backend:  http://localhost:3008
- Supabase: https://nddimpfyofoopjnroswf.supabase.co

Variables d'environnement (.env.local):
- NEXT_PUBLIC_SUPABASE_URL=https://nddimpfyofoopjnroswf.supabase.co
- NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIs...
- NEXT_PUBLIC_API_URL=http://localhost:3008
- NEXT_PUBLIC_GEMINI_API_KEY=AIzaSyDo8UorLKcMXR_...

🎨 SYSTÈME DE TEMPLATES (NOUVEAU)
=================================

Fonctionnalités:
- Templates sectoriels (agriculture, tech, commerce, etc.)
- Sections prédéfinies avec icônes et couleurs
- Gestion d'images par section
- Mode "nouvelle entreprise" vs "entreprise existante"
- Génération IA contextuelle par section
- Export PDF avec templates

Types de templates:
- Business Plan Standard
- Agriculture & Élevage
- Technologie & Innovation
- Commerce & Distribution
- Services & Consulting

Structure template:
- Métadonnées (nom, secteur, description)
- Sections configurables (titre, type, ordre)
- Images associées (inline, pleine largeur, côté)
- Historique entreprise (pour templates existants)

⚙️ FONCTIONNALITÉS CLÉS
========================

Gestion de projets:
- Création multi-étapes avec templates
- Collaboration multi-utilisateurs
- Secteurs prédéfinis
- Horizons temporels (3-7 ans)

Édition de contenu:
- Éditeur de sections par template
- Génération IA de contenu Gemini
- Gestion d'images par section
- Validation progressive

Calculs financiers:
- Projections de ventes automatiques
- OPEX/CAPEX avec amortissements
- Compte de résultat prévisionnel
- Tableaux de trésorerie
- Ratios financiers

Import/Export:
- Import données Excel (produits, projections)
- Export PDF professionnel avec templates
- Export Excel des données financières

🔐 AUTHENTIFICATION & SÉCURITÉ
==============================

- Supabase Auth (email/password)
- Row Level Security (RLS) sur toutes les tables
- Gestion des rôles utilisateurs
- Sessions sécurisées côté serveur
- Validation des permissions par route

📋 COMMANDES DE DÉVELOPPEMENT
=============================

Frontend:
cd frontend
npm install
npm run dev          # Développement (port 3007)
npm run build        # Build production
npm run start        # Serveur production
npm run lint         # Vérification code

Backend:
cd backend
npm install
npm run dev          # Développement (port 3008)
npm run build        # Compilation TypeScript
npm run start        # Serveur production

Base de données:
psql -d postgresql://[url] -f database/setup-templates.sql

🐛 PROBLÈMES RÉSOLUS RÉCEMMENT
==============================

1. Runtime Error BusinessPlanTab.tsx
   - Mappings d'icônes manquants pour nouveaux types sections
   - Solution: Ajout de 40+ mappings complets

2. Composants UI manquants
   - radio-group, dialog, alert-dialog, buttonVariants
   - Solution: Création composants Radix UI + export

3. Dépendances manquantes
   - sonner, SidebarRight (inexistant)
   - Solution: Installation + remplacement par PanelRight

4. Cache Next.js corrompu
   - routes-manifest.json manquant
   - Solution: Nettoyage .next + redémarrage serveur

📈 ÉTAT ACTUEL
==============

✅ Frontend: Fonctionnel avec système templates intégré
✅ Backend: API complète avec endpoints templates
✅ Base de données: Schéma complet avec templates
✅ Build: Compilation réussie (dev + production)
✅ Tests: Serveurs opérationnels et communicants

⚠️ Points d'attention:
- ESLint warnings mineurs (types any, quotes)
- Multiples serveurs en arrière-plan (nettoyage recommandé)
- Templates système en développement (5 templates base)

🚀 PROCHAINES ÉTAPES SUGGÉRÉES
==============================

1. Tests complets interface utilisateur
2. Création de templates sectoriels supplémentaires
3. Optimisation des calculs financiers
4. Amélioration génération IA contextuelle
5. Tests de charge et optimisation performances
6. Documentation utilisateur finale

================================================================================
                              FIN DE DOCUMENTATION
================================================================================

📞 CONTACT DÉVELOPPEUR
======================
Ce projet a été configuré et debuggé par Claude Code.
Dernière mise à jour: 18 septembre 2025
Version: 1.2.0 (avec système templates)

Pour questions techniques, se référer aux fichiers de configuration
et aux commentaires dans le code source.
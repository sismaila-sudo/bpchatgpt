import { NextRequest, NextResponse } from 'next/server'
import { OpenAIService } from '@/services/openaiService'
import { webSearchService } from '@/services/webSearchService'
import { webScrapingService } from '@/services/webScrapingService'
import { getRagServiceInstance } from '@/services/ragService'

interface MarketAnalysisRequest {
  sector: string
  location: {
    city: string
    region: string
  }
  projectType: string
  senegalContext: Record<string, unknown>
}

export async function POST(request: NextRequest) {
  try {
    const { sector, location, projectType }: MarketAnalysisRequest = await request.json()

    if (!sector || !location) {
      return NextResponse.json(
        { error: 'Sector and location are required' },
        { status: 400 }
      )
    }

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'OpenAI API key not configured' },
        { status: 500 }
      )
    }

    console.log(`üöÄ Analyse de march√©: ${sector} √† ${location.city}`)

    // √âTAPE 1: Recherche web en temps r√©el (Tavily)
    let webContext = ''
    if (webSearchService.isAvailable()) {
      console.log('üîç Recherche web Tavily en cours...')
      const searchResult = await webSearchService.searchSenegalMarket(
        sector,
        location.city,
        { year: new Date().getFullYear() }
      )
      webContext = webSearchService.formatForPrompt(searchResult)
      console.log(`‚úÖ Recherche web compl√©t√©e: ${searchResult.results.length} sources`)
    } else {
      console.warn('‚ö†Ô∏è Tavily non disponible - analyse sans recherche web')
    }

    // √âTAPE 2: Recherche dans base de connaissances RAG (si disponible)
    const ragService = getRagServiceInstance()
    let ragContext = ''
    if (ragService.isAvailable()) {
      console.log('üß† Recherche dans base de connaissances RAG...')
      const ragQuery = `march√© ${sector} S√©n√©gal opportunit√©s d√©fis ${location.city}`
      const ragResults = await ragService.search(ragQuery, 3)
      if (ragResults.length > 0) {
        ragContext = '\n\nBASE DE CONNAISSANCES OFFICIELLE:\n\n'
        ragResults.forEach((result, i) => {
          ragContext += `[${i + 1}] ${result.metadata.title} (${result.metadata.source} - ${result.metadata.year}):\n`
          ragContext += `${result.text}\n`
          ragContext += `Pertinence: ${(result.score * 100).toFixed(1)}%\n\n`
        })
        console.log(`‚úÖ RAG: ${ragResults.length} documents pertinents trouv√©s`)
      }
    }

    // √âTAPE 3: Scraping sources officielles (ANSD, Banque Mondiale, etc.)
    console.log('üìä R√©cup√©ration donn√©es officielles...')
    const officialData = await webScrapingService.getAllSenegalData()
    const scrapedDataArray = Object.values(officialData).filter((d): d is import('@/services/webScrapingService').ScrapedData => d !== null)
    const officialContext = webScrapingService.formatForPrompt(scrapedDataArray)
    console.log(`‚úÖ Donn√©es officielles r√©cup√©r√©es: ${scrapedDataArray.length} sources`)

    // √âTAPE 4: Construire le prompt enrichi avec TOUTES les donn√©es
    const prompt = `R√àGLES STRICTES - AUCUNE HALLUCINATION:
1. Utilise UNIQUEMENT les donn√©es fournies ci-dessous (RAG + web + sources officielles)
2. JAMAIS inventer de chiffres, d'acteurs ou de r√©f√©rences
3. TOUJOURS citer les sources exactes pour chaque affirmation
4. Si une donn√©e manque dans les sources fournies, √©cris "Donn√©e non disponible dans les sources"
5. Indique ton niveau de confiance: [√âlev√©], [Moyen], [Faible]

${ragContext}

${webContext}

${officialContext}

MISSION:
Effectue une analyse de march√© COMPL√àTE pour un projet de ${projectType} dans le secteur ${sector} au S√©n√©gal, sp√©cifiquement √† ${location.city}, r√©gion ${location.region}.

ANALYSE REQUISE (avec citations de sources obligatoires):
1. Taille et tendances du march√© ${sector} au S√©n√©gal
   - Utilise les donn√©es web et officielles ci-dessus
   - Cite pr√©cis√©ment les sources (URL, organisme)

2. Segments de client√®le cible dans ${location.region}
   - Base-toi sur les statistiques d√©mographiques fournies

3. Paysage concurrentiel
   - Mentionne UNIQUEMENT les acteurs trouv√©s dans les recherches web
   - Si aucun nom trouv√©: "Acteurs non identifi√©s dans les sources - √©tude terrain recommand√©e"

4. Barri√®res √† l'entr√©e et facteurs cl√©s de succ√®s
   - Base-toi sur les donn√©es Vision 2050 et programmes gouvernementaux fournis

5. Opportunit√©s sp√©cifiques (contexte Vision 2050)
   - Utilise les priorit√©s gouvernementales des sources officielles

6. Risques et menaces identifi√©s

7. Recommandations strat√©giques adapt√©es

Format: Texte structur√© professionnel avec citations [Source: ...]
Langue: Fran√ßais professionnel`

    // √âTAPE 5: G√©n√©ration de l'analyse avec IA
    console.log('ü§ñ G√©n√©ration analyse IA avec donn√©es enrichies (RAG + Web + Scraping)...')
    const analysis = await OpenAIService.generateCompletion(
      "Tu es un expert en analyse de march√© sp√©cialis√© dans l'√©conomie s√©n√©galaise. Tu travailles avec des donn√©es R√âELLES issues de la base de connaissances, recherches web et sources officielles.",
      prompt,
      3000 // Plus de tokens pour analyse d√©taill√©e
    )
    console.log('‚úÖ Analyse IA g√©n√©r√©e')

    // √âTAPE 6: Retourner r√©sultats avec m√©tadonn√©es compl√®tes
    return NextResponse.json({
      detailedAnalysis: analysis,
      metadata: {
        ragEnabled: ragService.isAvailable(),
        searchPerformed: webSearchService.isAvailable(),
        sourcesUsed: [
          ...(ragService.isAvailable() ? [{ name: 'Base de Connaissances RAG (Pinecone)', reliability: 'high', category: 'knowledge-base' }] : []),
          ...scrapedDataArray.map(d => ({
            name: d?.source || 'Unknown',
            url: d?.url || '',
            reliability: d?.reliability || 'unknown',
            category: 'official'
          })),
          ...(webContext ? [{ name: 'Web Search (Tavily)', reliability: 'high', category: 'web' }] : [])
        ],
        analysisTimestamp: new Date().toISOString(),
        sector,
        location: location.city
      },
      // Donn√©es structur√©es basiques pour compatibilit√©
      marketSize: `Analyse bas√©e sur recherches web et sources officielles`,
      targetAudience: `Voir analyse d√©taill√©e`,
      competition: ["Voir analyse d√©taill√©e avec sources"],
      opportunities: ["Voir analyse d√©taill√©e avec sources"],
      threats: ["Voir analyse d√©taill√©e avec sources"],
      recommendations: ["Voir analyse d√©taill√©e avec sources"]
    })
  } catch (error) {
    console.error('Erreur analyse march√©:', error)
    return NextResponse.json(
      { error: 'Erreur lors de l\'analyse de march√©' },
      { status: 500 }
    )
  }
}
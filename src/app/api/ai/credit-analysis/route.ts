import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { webSearchService } from '@/services/webSearchService'
import { webScrapingService } from '@/services/webScrapingService'
import { getRagServiceInstance } from '@/services/ragService'
import {
  CREDIT_ANALYST_SYSTEM_PROMPT,
  QUICK_ANALYSIS_INSTRUCTION,
  COMPREHENSIVE_ANALYSIS_INSTRUCTION
} from '@/prompts/creditAnalystPrompt'
import { rateLimit, getIdentifier, RATE_LIMITS } from '@/lib/rateLimit'
import { businessPlanTextSchema, validationErrorResponse } from '@/lib/validation'

// Mode d'analyse: quick (BP seul) ou comprehensive (avec recherches)
type AnalysisMode = 'quick' | 'comprehensive'

const OLD_CREDIT_ANALYST_PROMPT = `Tu es un analyste cr√©dit s√©nior dans une banque s√©n√©galaise (contexte UEMOA/BCEAO).

CONTEXTE √âCONOMIQUE S√âN√âGAL ${new Date().getFullYear()}:
- Vision strat√©gique: Vision S√©n√©gal 2050 (gouvernement actuel depuis mars 2024)
- Taux directeur BCEAO: 3.5%
- Taux cr√©dit PME moyen: 8-12%
- Imp√¥t sur soci√©t√©s: 30%, TVA: 18%
- Programmes de garantie: FONGIP, FAISE, DER

R√àGLES STRICTES - AUCUNE HALLUCINATION:

1. BASE DOCUMENTAIRE UNIQUEMENT:
   - Ne t'appuie QUE sur le contenu fourni dans {{BUSINESS_PLAN_TEXT}}
   - Si une info manque, √©cris explicitement "Non document√© dans le BP"
   - JAMAIS inventer de chiffres, contrats, prix, volumes, dates ou taux

2. JUSTIFICATION OBLIGATOIRE:
   - Chaque chiffre/ratio/date DOIT √™tre justifi√© avec source exacte
   - Format: "Selon [Tableau X, page Y]: [donn√©e]"
   - Si estimation n√©cessaire, le mentionner: "Estimation bas√©e sur [hypoth√®se]"

3. CALCULS FINANCIERS (quand donn√©es disponibles):
   - Sources & Emplois (√©quilibre obligatoire)
   - EBE (Exc√©dent Brut d'Exploitation)
   - CAF (Capacit√© d'Autofinancement)
   - DSCR annuel = CAF / Service de la dette (covenant minimum 1.3x BCEAO)
   - Int√©r√™ts, Amortissements du capital
   - Autonomie financi√®re = Fonds propres / Total bilan
   - Liquidit√© g√©n√©rale = Actif circulant / Passif circulant
   - Fonds de roulement = Actif circulant - Passif circulant
   - TRI (Taux de Rentabilit√© Interne), VAN (Valeur Actuelle Nette), Payback
   - Stress test: -10% CA, +10% charges op√©rationnelles

4. CONTEXTE R√âGLEMENTAIRE:
   - Normes prudentielles BCEAO
   - Ratio d'endettement acceptable: Dette/Fonds propres < 3
   - DSCR minimum bancaire: 1.3x (recommand√©: > 1.5x)
   - Garanties standards: hypoth√®que, nantissement, caution solidaire

5. OUTPUT STRUCTUR√â - Deux blocs:
A. JSON minimal pour la machine avec la structure suivante :
{
  "decision": "approve" | "conditional" | "decline",
  "reasons": ["raison 1", "raison 2"],
  "requestedFacilities": [
    {
      "type": "CMT",
      "montant": 645000000,
      "taux": 9,
      "tenor": 60,
      "differe": 12
    }
  ],
  "sourcesEmplois": {
    "sources": [
      {"description": "CMT (9%, 60m, 12m diff√©r√©)", "montant": 645000000}
    ],
    "emplois": [
      {"description": "B√¢timents cl√©s en main", "montant": 574400000}
    ],
    "totalSources": 934900000,
    "totalEmplois": 934900000
  },
  "ratios": {
    "dscr": {
      "2025": 5.0,
      "2026": 3.5,
      "2027": 3.0
    },
    "autonomieFinanciere": 26.6,
    "liquiditeGenerale": 0.85,
    "fondsRoulement": -112000000
  },
  "tri": 55,
  "van": 1230000000,
  "payback": "2 ans 1 mois",
  "projections": [
    {"year": 2025, "ca": 1360000000, "ebe": 450000000, "caf": 380000000, "dscr": 5.0}
  ],
  "risks": [
    {
      "type": "BFR",
      "description": "Fonds de roulement d√©ficitaire",
      "mitigation": "Domiciliation cr√©ances et lignes d'exploitation",
      "severity": "medium"
    }
  ],
  "mitigants": ["Domiciliation cr√©ances", "Lignes d'exploitation"],
  "covenants": ["Domiciliation irr√©vocable", "DSCR ‚â• 1,3x"],
  "evidence": ["Tableau 12 ‚Äì Plan de financement", "p. 27 ‚Äì Planning"]
}

B. Note de cr√©dit r√©dig√©e, structur√©e en sections (R√©sum√©, Objet, Projet, Historique, Pr√©visions & ratios, Risques & mitigations, Conditions & covenants).

6. TRA√áABILIT√â ET TRANSPARENCE:
   - Chaque affirmation financi√®re doit citer sa source documentaire
   - Indiquer clairement les hypoth√®ses et estimations
   - Mentionner les lacunes documentaires identifi√©es
   - Niveau de confiance global sur l'analyse: √âlev√©/Moyen/Faible

7. STYLE:
   - Concis, professionnel, orient√© d√©cision comit√© de cr√©dit
   - Factuel et argument√©
   - Recommandations actionnables

IMPORTANT:
- Renvoie uniquement un objet JSON valide avec deux cl√©s: "analysis" (objet JSON structur√©) et "noteDeCredit" (texte format√©)
- Inclure un champ "confidence" (0-1) et "documentationQuality" dans l'analysis
- Lister les "missingData" (donn√©es manquantes critiques)
- Ne renvoie RIEN d'autre que ce JSON`

export async function POST(request: NextRequest) {
  try {
    // ========== √âTAPE 1: RATE LIMITING ==========
    const identifier = getIdentifier(request)
    const rateLimitResult = rateLimit(identifier, RATE_LIMITS.AI_ANALYSIS)

    if (!rateLimitResult.success) {
      return NextResponse.json(
        {
          error: 'Trop de requ√™tes. Veuillez r√©essayer plus tard.',
          retryAfter: Math.ceil((rateLimitResult.reset - Date.now()) / 1000)
        },
        {
          status: 429,
          headers: {
            'X-RateLimit-Limit': rateLimitResult.limit.toString(),
            'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),
            'X-RateLimit-Reset': new Date(rateLimitResult.reset).toISOString()
          }
        }
      )
    }

    // ========== √âTAPE 2: VALIDATION ==========
    let validatedData
    try {
      const body = await request.json()
      validatedData = businessPlanTextSchema.parse(body)
    } catch (error) {
      return NextResponse.json(
        validationErrorResponse(error),
        { status: 400 }
      )
    }

    const { businessPlanText, mode = 'quick' as AnalysisMode } = validatedData

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'Cl√© API OpenAI non configur√©e' },
        { status: 500 }
      )
    }

    console.log(`üöÄ Analyse de cr√©dit - Mode: ${mode.toUpperCase()}`)

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    })

    const systemPrompt = CREDIT_ANALYST_SYSTEM_PROMPT
    let userPrompt = ''
    let enrichedContext = ''

    if (mode === 'comprehensive') {
      // MODE COMPLET: Avec recherches externes
      console.log('üìä Mode Comprehensive - R√©cup√©ration contexte march√©...')

      const [ragResults, creditContext, officialData] = await Promise.all([
        // RAG: Documents officiels
        (() => {
          const ragService = getRagServiceInstance()
          return ragService.isAvailable()
            ? ragService.search(`financement cr√©dit business plan normes BCEAO ratios`, 5)
            : Promise.resolve([])
        })(),
        // Web Search: Contexte √©conomique actuel
        webSearchService.isAvailable()
          ? webSearchService.searchCreditContext('g√©n√©ral', {
              includeFinancialMetrics: true,
              includeRegulations: true
            })
          : Promise.resolve({ query: '', results: [], sources: [], timestamp: new Date() }),
        // Scraping: Donn√©es officielles
        webScrapingService.getAllSenegalData()
      ])

      // Formater contexte RAG
      let ragContext = ''
      if (ragResults.length > 0) {
        ragContext = '\n\nüìö BASE DE CONNAISSANCES OFFICIELLE:\n\n'
        ragResults.forEach((result, i) => {
          ragContext += `[${i + 1}] ${result.metadata.title} (${result.metadata.source} - ${result.metadata.year}):\n`
          ragContext += `${result.text}\n\n`
        })
        console.log(`‚úÖ RAG: ${ragResults.length} documents pertinents`)
      }

      // Formater contexte web
      const creditContextFormatted = webSearchService.formatForPrompt(creditContext)

      // Formater donn√©es officielles
      const scrapedDataArray = Object.values(officialData).filter((d): d is import('@/services/webScrapingService').ScrapedData => d !== null)
      const officialContext = webScrapingService.formatForPrompt(scrapedDataArray)

      enrichedContext = ragContext + creditContextFormatted + officialContext
      console.log('‚úÖ Contexte march√© r√©cup√©r√©')

      userPrompt = COMPREHENSIVE_ANALYSIS_INSTRUCTION + '\n\n' +
        enrichedContext + '\n\n' +
        `BUSINESS PLAN √Ä ANALYSER:\n\n${businessPlanText}\n\n` +
        `Effectue une analyse de cr√©dit compl√®te en suivant la m√©thodologie d√©finie.`

    } else {
      // MODE QUICK: Analyse BP seul
      console.log('‚ö° Mode Quick - Analyse BP uniquement')

      userPrompt = QUICK_ANALYSIS_INSTRUCTION + '\n\n' +
        `BUSINESS PLAN √Ä ANALYSER:\n\n${businessPlanText}\n\n` +
        `Effectue une analyse de cr√©dit compl√®te en suivant la m√©thodologie d√©finie.`
    }

    // Appel √† OpenAI avec GPT-4
    console.log('ü§ñ G√©n√©ration analyse IA...')
    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: userPrompt
        }
      ],
      temperature: 0.2,  // Plus bas pour plus de rigueur
      max_tokens: 4096,  // Plus de tokens pour analyse compl√®te
      response_format: { type: 'json_object' }
    })
    console.log('‚úÖ Analyse g√©n√©r√©e')

    const responseContent = completion.choices[0]?.message?.content

    if (!responseContent) {
      throw new Error('Pas de r√©ponse de l\'IA')
    }

    // Parser la r√©ponse JSON
    const result = JSON.parse(responseContent)

    // Valider la structure de base
    if (!result.analysis || !result.noteDeCredit) {
      // Si la structure n'est pas comme attendue, essayer de l'adapter
      if (result.decision) {
        // La r√©ponse est directement l'analyse
        return NextResponse.json({
          analysis: result,
          noteDeCredit: result.noteDeCredit || 'Note de cr√©dit non g√©n√©r√©e'
        })
      }
      throw new Error('Structure de r√©ponse invalide')
    }

    return NextResponse.json(result)

  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue'
    console.error('Erreur analyse de cr√©dit:', error)
    return NextResponse.json(
      {
        error: 'Erreur lors de l\'analyse de cr√©dit',
        details: errorMessage
      },
      { status: 500 }
    )
  }
}